package handlers

import (
	"fmt"
	"net/http"


	ws "github.com/gorilla/websocket"
)

var notificationUpgrader = ws.Upgrader{
	CheckOrigin: func(r *http.Request) bool { return true }, // Permitir conex√µes de qualquer origem (melhorar em prod)
}

// HandleNotificationWebSocket gerencia conex√µes WebSocket para notifica√ß√µes
func HandleNotificationWebSocket(w http.ResponseWriter, r *http.Request) {
	conn, err := notificationUpgrader.Upgrade(w, r, nil)
	if err != nil {
		fmt.Println("Erro ao fazer upgrade para WebSocket (notifica√ß√µes):", err)
		http.Error(w, "Erro ao estabelecer WebSocket", http.StatusInternalServerError)
		return
	}
	defer conn.Close()

	fmt.Println("üîó Cliente conectado ao WebSocket de Notifica√ß√µes")

	// Loop para leitura e resposta
	for {
		messageType, msg, err := conn.ReadMessage()
		if err != nil {
			fmt.Println("‚ùå Erro ao ler mensagem (notifica√ß√£o):", err)
			break
		}

		fmt.Printf("üì© Notifica√ß√£o recebida: %s\n", msg)

		// Responder ao cliente confirmando o recebimento
		response := fmt.Sprintf("‚úÖ Notifica√ß√£o recebida: %s", msg)
		err = conn.WriteMessage(messageType, []byte(response))
		if err != nil {
			fmt.Println("‚ùå Erro ao enviar resposta (notifica√ß√£o):", err)
			break
		}
	}
}
